#+TITLE: Ned's GNU Emacs Config
#+AUTHOR: Nedeljko Radovanovic (Ned)
#+DESCRIPTION: Ned's personal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#core][CORE]]
  - [[#elpaca-package-manager][Elpaca package manager]]
  - [[#startup-performance-and-stuff][Startup Performance and stuff]]
  - [[#file-limits][File limits]]
  - [[#encoding][Encoding]]
  - [[#there-shall-be-evil][There shall be EVIL]]
  - [[#basic-uiux][Basic UI/UX]]
  - [[#theme-and-modeline][Theme and Modeline]]
  - [[#dashboard][Dashboard]]
  - [[#font][Font]]
  - [[#helpful-commands][Helpful Commands]]
  - [[#magit][Magit]]
  - [[#diminish][Diminish]]
  - [[#rainbow-delimiters-and-mode][Rainbow Delimiters and Mode]]
  - [[#flycheck][Flycheck]]
  - [[#sudo][Sudo]]
  - [[#comments][Comments]]
  - [[#undo-tree][Undo-tree]]
  - [[#which-key][Which key]]
  - [[#dired][Dired]]
  - [[#vterm][Vterm]]
  - [[#general-keybindings][General keybindings]]
  - [[#copilot][Copilot]]
- [[#org-mode][ORG MODE]]
- [[#programming][Programming]]
  - [[#projectile][Projectile]]
  - [[#perspective][Perspective]]
  - [[#completion][Completion]]
  - [[#treesitter][Treesitter]]
  - [[#formating][Formating]]
  - [[#language-server-protocol][Language Server Protocol]]
  - [[#languages][Languages]]

* CORE

** Elpaca package manager

#+begin_src emacs-lisp

  (defvar elpaca-installer-version 0.6)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil
				:files (:defaults "elpaca-test.el" (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		   ((zerop (call-process "git" nil buffer t "clone"
					 (plist-get order :repo) repo)))
		   ((zerop (call-process "git" nil buffer t "checkout"
					 (or (plist-get order :ref) "--"))))
		   (emacs (concat invocation-directory invocation-name))
		   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		   ((require 'elpaca))
		   ((elpaca-generate-autoloads "elpaca" repo)))
	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))

  ;; Block until current queue processed.
  (elpaca-wait)

  ;;When installing a package which modifies a form used at the top-level
  ;;(e.g. a package which adds a use-package key word),
  ;;use `elpaca-wait' to block until that package has been installed/configured.
  ;;For example:
  ;;(use-package general :demand t)
  ;;(elpaca-wait)

  ;;Turns off elpaca-use-package-mode current declartion
  ;;Note this will cause the declaration to be interpreted immediately (not deferred).
  ;;Useful for configuring built-in emacs features.
  ;;(use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

  ;; Don't install anything. Defer execution of BODY
  ;;(elpaca nil (message "deferred"))
  (defvar native-comp-deferred-compilation-deny-list nil) ;; Some native stuff that I don't understand

  ;; Well just a casual Mac OS issues.........
  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns x))
    :config
    (exec-path-from-shell-initialize))

#+end_src


** Startup Performance and stuff
#+begin_src emacs-lisp
  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (message "*** Emacs loaded in %s with %d garbage collections."
		       (format "%.2f seconds"
			       (float-time
				(time-subtract after-init-time before-init-time)))
		       gcs-done)))
  ;; Silence compiler warnings
  (setq comp-async-report-warnings-errors nil)
  ;; DISABLE INITIALIZATION WARNINGS
  (setq warning-minimum-level :emergency)
    ;;; for lsp performance
  (setq read-process-output-max (* 1024 1024)) ; TODO: find out what this is!

  (setq ring-bell-function 'ignore)
#+end_src


** File limits
Emacs is bad with large files??

#+begin_src emacs-lisp
  (setq gc-cons-thresold (* 50 1000 1000))
  (setq large-file-warning-thresold 100000000)

  (setq make-backup-files nil) ; stop creating ~ files
  (setq create-lockfiles nil) ; stop creating # files
#+end_src


** Encoding

#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
#+end_src

** There shall be EVIL
#+begin_src emacs-lisp
  ;; Make ESC quit prompts so we dont bash in ESC key 3 times before it exists anything....
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))

  (with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "RET") nil)
    (define-key evil-motion-state-map (kbd "TAB") nil))
  ;; Setting RETURN key in org-mode to follow links
  (setq org-return-follows-link  t)
  (setq forge-add-default-bindings nil)
#+end_src


** Basic UI/UX
Make UI look minimal and modern.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (setq inhibit-startup-screen t)
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (menu-bar-mode -1)          ; Disable the menu bar
  (pixel-scroll-precision-mode t)

  ;; maximize screan on start
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (setq-default word-wrap t) ;; tidy

  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  shell-mode-hook
		  treemacs-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; Hopefully fixes scroll behaviour
  (setq scroll-conservatively 1001
	scroll-margin 10
	scroll-preserve-screen-position 1)

  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

** Theme and Modeline
NOTE: The first time you load your configuration on a new machine, you’ll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.
#+begin_src emacs-lisp
  (use-package doom-themes
    :init (load-theme 'doom-one t))

  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15))
    :config   (setq doom-modeline-height 35      ;; sets modeline height
		    doom-modeline-bar-width 5    ;; sets right bar width
		    doom-modeline-persp-name t   ;; adds perspective name to modeline
		    doom-modeline-persp-icon t)) ;; adds folder icon next to persp name
#+end_src

** Dashboard

#+begin_src emacs-lisp

    (use-package dashboard
      :elpaca t
      :config
      (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
      (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
      (dashboard-setup-startup-hook)
      (setq dashboard-startup-banner 'logo)
      (setq dashboard-banner-logo-title "Welcome to the Society")
  ;    (setq dashboard-icon-type 'all-the-icons) ;; use `all-the-icons' package
      ;; Content is not centered by default. To center, set
      (setq dashboard-center-content t)
      (setq dashboard-set-init-info t)
  ;    (setq dashboard-projects-switch-function 'projectile-switch-project)
 ;     (setq dashboard-items '((recents  . 5)
;			    (projects . 5)))
      (setq dashboard-items nil)
      )


					    ; (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
#+end_src

** Font

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Fira Code Retina")

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina")

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Fira Code Retina" :weight 'regular)

  ;; Needed if using emacsclient CHECK THIS??
  (add-to-list 'default-frame-alist '(font . "Fira Code Retina"))
#+end_src

** Helpful Commands
Helpful adds a lot of very helpful (get it?) information to Emacs’ describe- command buffers.

#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

  (fset 'yes-or-no-p 'y-or-n-p)

  (global-auto-revert-mode t)
  (add-hook 'before-save-hook 'whitespace-cleanup)
#+end_src

** Magit
True and only

#+begin_src emacs-lisp
  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package forge)

  (use-package git-gutter-fringe
    :diminish
    :hook ((text-mode . git-gutter-mode)
	   (prog-mode . git-gutter-mode))
    :config
    (setq git-gutter:update-interval 0.5)
    (setq git-gutter:modified-sign "~")
    (setq git-gutter:added-sign "+")
    (setq git-gutter:deleted-sign "-")
    (set-face-foreground 'git-gutter:added "LightGreen")
    (set-face-foreground 'git-gutter:modified "LightGoldenrod")
    (set-face-foreground 'git-gutter:deleted "LightCoral"))
#+end_src

** Diminish

#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

** Rainbow Delimiters and Mode

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
	   (clojure-mode . rainbow-delimiters-mode)))

  (use-package rainbow-mode
    :diminish
    :hook org-mode prog-mode)
#+end_src

** Flycheck

#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :defer t
    :diminish
    :init (global-flycheck-mode))
#+end_src

** Sudo

#+begin_src emacs-lisp
  (use-package sudo-edit)
#+end_src

** Comments

#+begin_src emacs-lisp
;; TODO
  (use-package evil-nerd-commenter
    :config
    (general-define-key
     :states '(normal visual)
     "gc" 'evilnc-comment-or-uncomment-lines))

#+end_src

** Undo-tree

#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :config
    (global-undo-tree-mode t)
    (setq undo-tree-auto-save-history nil))
#+end_src

** Which key

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode 1)
    :config
    (setq which-key-idle-delay 0.3
	  which-key-separator " → " ))
#+end_src

** Dired

#+begin_src emacs-lisp
  (use-package dired-open
    :config
    (setq dired-open-extensions '(("gif" . "sxiv")
				  ("jpg" . "sxiv")
				  ("png" . "sxiv")
				  ("mkv" . "mpv")
				  ("mp4" . "mpv"))))

  (use-package peep-dired
    :after dired
    :hook (evil-normalize-keymaps . peep-dired-hook)
    :config
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file))
#+end_src

** Vterm

#+begin_src emacs-lisp
  (use-package vterm
    :config
    (setq vterm-max-scrollback 50000)
    (defun evil-collection-vterm-escape-stay ()
      "Go back to normal state but don't move
  cursor backwards. Moving cursor backwards is the default vim behavior but it is
  not appropriate in some cases like terminals."
      (setq-local evil-move-cursor-back nil))

    (add-hook 'vterm-mode-hook #'evil-collection-vterm-escape-stay))

  (use-package vterm-toggle
    :after vterm
    :config
    ;; When running programs in Vterm and in 'normal' mode, make sure that ESC
    ;; kills the program as it would in most standard terminal programs.
    (evil-define-key 'normal vterm-mode-map (kbd "<escape>") 'vterm--self-insert)
    (setq vterm-toggle-fullscreen-p nil)
    (setq vterm-toggle-scope 'project)
    (add-to-list 'display-buffer-alist
		 '((lambda (buffer-or-name _)
		     (let ((buffer (get-buffer buffer-or-name)))
		       (with-current-buffer buffer
			 (or (equal major-mode 'vterm-mode)
			     (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
		   (display-buffer-reuse-window display-buffer-at-bottom)
		   ;;(display-buffer-reuse-window display-buffer-in-direction)
		   ;;display-buffer-in-direction/direction/dedicated is added in emacs27
		   ;;(direction . bottom)
		   ;;(dedicated . t) ;dedicated is supported in emacs27
		   (reusable-frames . visible)
		   (window-height . 0.4))))
#+end_src

** General keybindings

#+begin_src emacs-lisp

  (use-package general
    :config
    (general-evil-setup)

    ;; set up 'SPC' as the global leader key
    (general-create-definer verde/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC" ;; set leader
      :global-prefix "M-SPC") ;; access leader in insert mode

    (general-create-definer verde/local-leader-key
      :states '(normal visual)
      :keymaps 'override
      :prefix ",")

    ;; general
    (verde/leader-keys
      "SPC" '(execute-extended-command :wk "Counsel M-x")
      "=" '(perspective-map :wk "Worspace management") ;; Lists all the perspective keybindings
      "q q" '(evil-quit :wk "Gtfo"))
    ;; file navigation
    (verde/leader-keys
      "s" '(:ignore t :wk "Search")
      "." '(find-file :wk "Find file")
      "s s" '(consult-line :wk "Search line")
      "s l" '(consult-goto-line :wk "Search line")
      "s d" '(dictionary-search :wk "Search line")
      )

    (verde/leader-keys
      "b" '(:ignore t :wk "Bookmarks/Buffers")
      "b b" '(switch-to-buffer :wk "Switch to buffer")
      "b c" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
      "b C" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
      "b d" '(bookmark-delete :wk "Delete bookmark")
      "b i" '(consult-buffer :wk "Ibuffer")
      "b k" '(kill-current-buffer :wk "Kill current buffer")
      "b K" '(kill-some-buffers :wk "Kill multiple buffers")
      "b l" '(list-bookmarks :wk "List bookmarks")
      "b m" '(bookmark-set :wk "Set bookmark")
      "b n" '(next-buffer :wk "Next buffer")
      "b p" '(previous-buffer :wk "Previous buffer")
      "b r" '(revert-buffer :wk "Reload buffer")
      "b R" '(rename-buffer :wk "Rename buffer")
      "b s" '(basic-save-buffer :wk "Save buffer")
      "b S" '(save-some-buffers :wk "Save multiple buffers")
      "b w" '(bookmark-save :wk "Save current bookmarks to bookmark file"))
    ;; magit
    (verde/leader-keys
      "g" '(:ignore t :wk "Git/Goto")
      "g g" '(magit-status :wk "Git"))

    ;; magit
    (verde/leader-keys
      "h" '(:ignore t :wk "Help")
      "h v" '(describe-variable :wk "Describe variable")
      "h f" '(describe-function :wk "Describe variable")
      "h r" '(:ignore t :wk "Reload")
      "h r r" '((lambda () (interactive)
		  (load-file "~/.config/emacs/init.el")
		  (ignore (elpaca-process-queues)))
		:wk "Reload emacs config"))

    ;; files
    (verde/leader-keys
      "f" '(:ignore t :wk "Files")
      "f r" '(consult-recent-file :wk "Recent files")
      "f u" '(sudo-edit-find-file :wk "Sudo find file")
      "f U" '(sudo-edit :wk "Sudo edit file")
      "f c" '((lambda () (interactive)
		(find-file "~/.config/emacs/config.org"))
	      :wk "Open emacs config.org")
      "f P" '((lambda () (interactive)
		(dired "~/.config/emacs/"))
	      :wk "Open user-emacs-directory in dired"))
    ;; projectile
    (verde/leader-keys
      "p" '(projectile-command-map :wk "Projectile"))
    ;; dired
    (verde/leader-keys
      "d" '(:ignore t :wk "Dired")
      "d d" '(dired :wk "Open dired")
      "d j" '(dired-jump :wk "Dired jump to current")
      "d p" '(peep-dired :wk "Peep-dired"))
    ;; open
    (verde/leader-keys
      "o" '(:ignore t :wk "Open/Toggle")
      "o t" '(vterm-toggle :wk "Toggle Vterm")
      "o e" '(vterm-toggle :wk "Toggle Treemacs"))

    )

#+end_src

** Copilot

#+begin_src emacs-lisp

  (use-package copilot
  :elpaca (copilot :host github
		   :repo "zerolfx/copilot.el"
		   :branch "main"
		   :files ("dist" "*.el"))
  :bind (:map copilot-completion-map
	      ("<tab>" . 'copilot-accept-completion)
	      ("TAB" . 'copilot-accept-completion)
	      ("C-TAB" . 'copilot-accept-completion-by-word)
	      ("C-<tab>" . 'copilot-accept-completion-by-word))
  :hook (prog-mode . copilot-mode)
  :config (add-hook 'prog-mode-hook 'copilot-mode))

#+end_src

* ORG MODE

#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (defun verde/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
	  visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . verde/org-mode-visual-fill))

#+end_src


* Programming

** Projectile

#+begin_src emacs-lisp
  (use-package projectile
    :config
    (projectile-mode 1)
    (setq projectile-sort-order 'recentf)
    (setq projectile-enable-caching t)
    (setq projectile-switch-project-action #'projectile-dired))
#+end_src

** Perspective

#+begin_src emacs-lisp
  (use-package perspective
    :custom
    ;; NOTE! I have also set 'SCP =' to open the perspective menu.
    ;; I'm only setting the additional binding because setting it
    ;; helps suppress an annoying warning message.
    (persp-mode-prefix-key (kbd "C-c M-p"))
    :init
    (persp-mode)
    :config
    ;; Sets a file to write to when we save states
    (setq persp-state-default-file "~/.config/emacs/sessions"))

  ;; This will group buffers by persp-name in ibuffer.
  (add-hook 'ibuffer-hook
	    (lambda ()
	      (persp-ibuffer-set-filter-groups)
	      (unless (eq ibuffer-sorting-mode 'alphabetic)
		(ibuffer-do-sort-by-alphabetic))))

  ;; Automatically save perspective states to file when Emacs exits.
  (add-hook 'kill-emacs-hook #'persp-state-save)

#+end_src


** Completion

#+begin_src emacs-lisp
  (use-package corfu
    :ensure t
    :init
    (global-corfu-mode)
    :custom
    (corfu-auto t)
    (corfu-auto-delay 0)
    (corfu-auto-prefix 0)
    (corfu-auto-prefix 0))

  (use-package vertico
    :ensure t
    :custom
    (vertico-cycle t)
    (read-buffer-completion-ignore-case t)
    (read-file-name-completion-ignore-case t)
    (completion-styles '(basic substring partial-completion flex orderless))

    :init
    (vertico-mode)
    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next` and `vertico-previous`.
    (setq vertico-cycle t))

  (use-package consult
    :ensure t
    :hook (completion-list-mode . consult-preview-at-point-mode)
    :config
    (recentf-mode 1)
    (setq read-buffer-completion-ignore-case t
	  read-file-name-completion-ignore-case t
	  completion-ignore-case t))

  (use-package embark
    :diminish
    :ensure t
    :bind
    (("C-." . embark-act)
     ("C-;" . embark-dwim)
     ("C-h B" . embark-bindings))
    :init
    (setq prefix-help-command #'embark-prefix-help-command)
    (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    :config
    (add-to-list 'display-buffer-alist
		 '("\\'\\*Embark Collect \\(Live\\|Completions\\)\\*"
		   nil
		   (window-parameters (mode-line-format . none)))))

  (use-package embark-consult
    :diminish
    :ensure t
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

  (use-package marginalia
    :after vertico
    :ensure t
    :init
    (marginalia-mode))

  (use-package orderless
    :ensure t
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
	  read-buffer-completion-ignore-case t
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Treesitter

#+begin_src emacs-lisp
  (use-package tree-sitter
    :ensure t
    :config
    ;; activate tree-sitter on any buffer containing code for which it has a parser available
    (global-tree-sitter-mode)
    ;; you can easily see the difference tree-sitter-hl-mode makes for python, ts or tsx
    ;; by switching on and off
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

  (use-package tree-sitter-langs
    :ensure t
    :after tree-sitter)

#+end_src

** Formating

#+begin_src emacs-lisp
					  ; (use-package format-all
					  ;  :init
					  ;  (add-hook 'prog-mode-hook 'format-all-mode))

  ;; auto-format different source code files extremely intelligently
  ;; https://github.com/radian-software/apheleia
  (use-package apheleia
    :ensure t
    :config
    (apheleia-global-mode +1))

#+end_src

** Language Server Protocol

#+begin_src emacs-lisp

  (use-package eglot
    :ensure t)

  (use-package lsp-mode
    :commands
    (lsp lsp-deferred)
    :hook
    ((lsp-mode . (lambda () (setq-local evil-lookup-func #'lsp-describe-thing-at-point)))
     (lsp-mode . lsp-enable-which-key-integration))
    :config
    (verde/leader-keys
      :states 'normal
      :keymaps 'lsp-mode-map
      ;; lsp format
      "c"   '(:ignore t :which-key "code")
      "c a" '(lsp-execute-code-action :which-key "code action")
      "c f"  '(:ignore t :which-key "format")
      "c f b" 'lsp-format-buffer
      "c f r" 'lsp-format-region)
    :init
    (setq lsp-keep-workspace-alive nil)
    (setq lsp-auto-execute-action nil)
    (setq lsp-before-save-edits nil)
    (setq lsp-headerline-breadcrumb-enable nil)
    (setq lsp-restart 'ignore)
    (setq lsp-enable-file-watchers nil)
    ;; docs at the bottom of the buffer
    (setq lsp-signature-auto-activate t)
    (setq lsp-signature-render-documentation t)
    ;; diagnostics at the right side
    (setq lsp-modeline-diagnostics-enable t)
    (setq lsp-diagnostics-provider :flycheck)
    ;; bottom doc hover
    (setq lsp-eldoc-enable-hover nil)
    ;; modeline lenses
    (setq lsp-lens-enable t))

  (use-package lsp-ui
    :hook
    (lsp-mode . lsp-ui-mode)
    :config
    (verde/local-leader-keys
     "h" 'lsp-ui-doc-show
     "H" 'lsp-ui-doc-hide)
    (lsp-ui-peek-mode-map
     :states 'normal
     "C-j" 'lsp-ui-peek--select-next
     "C-k" 'lsp-ui-peek--select-prev)
    (outline-mode-map
     :states 'normal
     "C-j" 'nil
     "C-k" 'nil)
    :config
    (general-define-key
     :states 'normal
     :keymaps 'lsp-mode-map
     "g"   '(:ignore t :which-key "goto")
     "C-SPC" 'company-complete-common
     "g d" '(lsp-find-definition :which-key "definition")
     "g t" '(lsp-find-type-definition :which-key "type definition")
     "g D" '(lsp-ui-peek-find-definitions :which-key "definition")
     "g r" '(lsp-ui-peek-find-references :which-key "reference")
     "g i" '(lsp-ui-peek-find-implementation :which-key "implementation")

     "g D" '(lsp-ui-peek-find-definitions :which-key "definition")
     "g r" '(lsp-ui-peek-find-references :which-key "reference")
     "g i" '(lsp-ui-peek-find-implementation :which-key "implementation")
     ;; lsp diagnose with flycheck
     "d"   '(:ignore t :which-key "diagnostics")
     "d l" '(lsp-ui-flycheck-list :which-key "diagnostics list")
     "rn"  'lsp-rename
     )
    :init
    (setq lsp-ui-doc-show-with-cursor t)
    (setq lsp-ui-show-diagnostics t)
    (setq lsp-ui-sideline-enable t)
    (setq lsp-ui-doc-show-with-mouse nil)
    ;; (setq lsp-ui-peek-always-show t)
    ;; (setq lsp-ui-peek-fontify 'always)
    (setq lsp-ui-doc-enable t))

  (use-package lsp-treemacs
    :after lsp
    :custom
    (lsp-treemacs-theme "doom-colors")
    (treemacs-width 35)
    (treemacs-git-mode 'extended)
    (treemacs-git-display-mode 'treemacs-git-display-mode-git-status)
    (treemacs-show-hidden-files t)
    (treemacs-silent-refresh t)
    (treemacs-silent-filewatch t)
    (treemacs-collapse-dirs 0)
    (treemacs-filewatch-mode 'deferred))

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    ;; :bind (:map company-active-map
    ;;	   ("<tab>" . company-complete-selection))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    :config (general-define-key
	     :states 'insert
	     "C-SPC" 'company-complete-common))

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src

** Languages

*** Typescript

#+begin_src emacs-lisp

  (use-package typescript-mode
    :after tree-sitter
    :hook (typescript-mode . lsp-deferred)
    :config
    ;; we choose this instead of tsx-mode so that eglot can automatically figure out language for server
    ;; see https://github.com/joaotavora/eglot/issues/624 and https://github.com/joaotavora/eglot#handling-quirky-servers
    (define-derived-mode typescriptreact-mode typescript-mode
      "TypeScript TSX")
    (setq typescript-indent-level 2)
    ;; use our derived mode for tsx files
    (add-to-list 'auto-mode-alist '("\\.tsx?\\'" . typescriptreact-mode))
    ;; by default, typescript-mode is mapped to the treesitter typescript parser
    ;; use our derived mode to map both .tsx AND .ts -> typescriptreact-mode -> treesitter tsx
    (add-to-list 'tree-sitter-major-mode-language-alist '(typescriptreact-mode . tsx)))

#+end_src

*** Python

#+begin_src emacs-lisp

#+end_src
